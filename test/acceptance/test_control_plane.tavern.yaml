---
test_name: Poll until server is ready

stages:
  - name: polling
    max_retries: 15
    delay_before: 2
    request:
      url: 'http://envoy-control-plane:8080/healthcheck'
    response:
      status_code: 200

---
test_name: Cluster Discovery Service

stages:
  - name: CDS
    request:
      url: 'http://envoy-control-plane:8080/v2/discovery:clusters'
      method: POST
      json: &T1_cluster
        node:
          id: envoy
          cluster: T1
          build_version: e5f864a82d4f27110359daa2fbdcb12d99e415b9/1.8.0/Clean/RELEASE
          locality:
            zone: us-east-1
          metadata:
            # This is an example. Won't work anywhere besides local stack.
            auth: &auth_secret 'gAAAAABdXjy8Zuf2iB5vMKlJ3qimHV7-snxrnfwYb4NVlOwpcbYZxlNAwn5t3S3XkoTG8vB762fIogPHgUdnSsDMDu1S1NF3Wx1HQQ9Zm2aaTYok1f380mTQOiyAcqRGrIHYIoFXUkaA49WHMX5JfM9EBKjo3m6gPQ=='
            ipv4: 127.0.0.1
        version_info: '0'
      headers: &xds_headers
        content-type: application/json
        accept-encoding: None
    response:
      status_code: 200
      save:
        body:
          config_version: version_info
      body:
        resources:
          - '@type': type.googleapis.com/envoy.api.v2.Cluster
            name: google-proxy
            connect_timeout: 5s
            tls_context: {}
            type: strict_dns
            load_assignment:
              cluster_name: google-proxy_cluster
              endpoints:
                - locality:
                    zone: ap-southeast-2
                  lb_endpoints:
                    - endpoint:
                        address:
                          socket_address:
                            address: google.com.au
                            port_value: 443
                - locality:
                    zone: us-west-1
                  lb_endpoints:
                    - endpoint:
                        address:
                          socket_address:
                            address: google.com
                            port_value: 443
                # Endpoints are padded to enable zone-aware load-balancing
                - !anything
                - !anything
                - !anything
                - !anything
                - !anything
        version_info: !anystr
  - name: CDS with same version returns 504
    request:
      url: 'http://envoy-control-plane:8080/v2/discovery:clusters'
      method: POST
      json:
        node:
          id: envoy
          cluster: T1
          build_version: e5f864a82d4f27110359daa2fbdcb12d99e415b9/1.8.0/Clean/RELEASE
          locality:
            zone: us-east-1
          metadata:
            auth: *auth_secret
            ipv4: 127.0.0.1
        version_info: '{config_version}'
      headers: *xds_headers
    response:
      status_code: 504
  - name: CDS with same version but different node id/meta returns 504
    request:
      url: 'http://envoy-control-plane:8080/v2/discovery:clusters'
      method: POST
      json:
        node:
          id: i-asdfgh
          cluster: T1
          build_version: e5f864a82d4f27110359daa2fbdcb12d99e415b9/1.8.0/Clean/RELEASE
          locality:
            zone: us-east-1
          metadata:
            auth: *auth_secret
            ipv4: 127.0.0.8
        version_info: '{config_version}'
      headers: *xds_headers
    response:
      status_code: 504

---
test_name: Listener Discovery Service

stages:
  - name: LDS
    request:
      url: 'http://envoy-control-plane:8080/v2/discovery:listeners'
      method: POST
      json: *T1_cluster
      headers: *xds_headers
    response:
      status_code: 200
      body:
        $ext:
          function: tavern.testutils.helpers:validate_regex
          extra_kwargs:
            expression: https_listener

---
test_name: Route Discovery Service

stages:
  - name: RDS
    request:
      url: 'http://envoy-control-plane:8080/v2/discovery:routes'
      method: POST
      json: *T1_cluster
      headers: *xds_headers
    response:
      status_code: 200
      body:
        $ext:
          function: tavern.testutils.helpers:validate_regex
          extra_kwargs:
            expression: google-proxy_virtualhost

---
test_name: Health checks

stages:
  - name: Healthcheck
    request:
      url: 'http://envoy-control-plane:8080/healthcheck'
      method: GET
    response:
      status_code: 200
  - name: Deepcheck
    request:
      url: 'http://envoy-control-plane:8080/deepcheck'
      method: GET
    response:
      status_code: 200

---
test_name: Crypto operations

stages:
  - name: Garbage text is not decryptable
    request:
      url: 'http://envoy-control-plane:8080/crypto/decryptable'
      method: POST
      json:
        data: 'foobar'
    response:
      body:
        error: "InvalidToken('Decryption failed')"
        request_id: !anystr
      status_code: 500
  - name: Get a key
    request:
      url: 'http://envoy-control-plane:8080/crypto/generate_key'
      method: GET
    response:
      status_code: 200
      save:
        body:
          secret: result
  - name: Encrypt secret
    request:
      url: 'http://envoy-control-plane:8080/crypto/encrypt'
      method: POST
      json:
        data: hello
        key: '{secret}'
    response:
      status_code: 200
      save:
        body:
          encrypted_data: result
  - name: Decrypt secret
    request:
      url: 'http://envoy-control-plane:8080/crypto/decrypt'
      method: POST
      json:
        data: '{encrypted_data}'
        key: '{secret}'
    response:
      status_code: 200
      body:
        result: hello
  - name: Encrypt a secret using the server private key
    request:
      url: 'http://envoy-control-plane:8080/crypto/encrypt'
      method: POST
      json:
        data: helloworld
    response:
      status_code: 200
      save:
        body:
          encrypted_data: result
  - name: The secret is decryptable
    request:
      url: 'http://envoy-control-plane:8080/crypto/decryptable'
      method: POST
      json:
        data: '{encrypted_data}'
    response:
      status_code: 200
  - name: Decrypting without a key is not allowed
    request:
      url: 'http://envoy-control-plane:8080/crypto/decrypt'
      method: POST
      json:
        data: 'blah'
    response:
      status_code: 400
      strict: no
      body:
        error: 'A key must be supplied to use for decryption'
  - name: Wrong key size results in error
    request:
      url: 'http://envoy-control-plane:8080/crypto/encrypt'
      method: POST
      json:
        data: hello
        key: abc
    response:
      status_code: 400
      strict: no
      body:
        error: "ValidationError: 'abc' is too short"

---
test_name: Admin endpoints

stages:
  - name: xds_dump endpoint without an xds type
    max_retries: 5
    request:
      url: 'http://envoy-control-plane:8080/admin/xds_dump'
      method: GET
    response:
      status_code: 400
  - name: xds_dump endpoint
    max_retries: 5
    request:
      url: 'http://envoy-control-plane:8080/admin/xds_dump?type=routes'
      method: GET
    response:
      status_code: 200
  - name: Diagnose instance sources
    max_retries: 5
    request:
      url: 'http://envoy-control-plane:8080/admin/source_dump?partition=*&debug=1'
      method: GET
    response:
      strict: no
      status_code: 200
      body:
        - name: google-proxy
          service_clusters:
            - "*"
          endpoints:
            - address: google.com.au
              region: ap-southeast-2
              port: 443
            - address: google.com
              region: us-west-1
              port: 443
