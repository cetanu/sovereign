version_info: '{{ version|default(0) }}'
resources:
{% for instance in instances %}
{% for cluster in instance.parameters.clusters %}
  {% set service_name = instance.get('alt_service_name', instance.instance_id) %}
  - '@type': type.googleapis.com/envoy.api.v2.Cluster
    name: {{ service_name }}-{{ cluster.name }}
    connect_timeout: 5s
    per_connection_buffer_limit_bytes: 16777216
    common_http_protocol_options:
      idle_timeout: 55s
    dns_lookup_family: V4_ONLY
    lb_policy: random

    {% if utils.healthchecks_enabled(cluster.healthchecks) %}
    health_checks:
    {% for healthcheck in cluster.healthchecks %}
    {% for host in cluster.hosts %}
      - interval: 15s
        no_traffic_interval: 45s
        timeout: 15s
        unhealthy_threshold: 3
        healthy_threshold: 1
        reuse_connection: no
        http_health_check:
          path: {{ healthcheck.path }}
          host: {{ host.address }}
    {% endfor %}
    {% endfor %}
    common_lb_config:
      healthy_panic_threshold:
        value: 20
    {% endif %}

    # TODO: this needs to be a top-level setting
    {% if 'region' in cluster.hosts.0 %}
    {% set cluster_type = 'EDS' %}
    eds_cluster_config:
      service_name: {{ service_name }}-{{ cluster.name }}
      eds_config:
        api_config_source:
          api_type: REST
          cluster_names: [controlplane]
          refresh_delay: 5s
    {% else %}
    {% set cluster_type = 'strict_dns' %}
    hosts:
    {% for host in cluster.hosts %}
      - socket_address:
          address: {{ host.address }}
          port_value: {{ host.port }}
          protocol: TCP
    {% endfor %}
    {% endif %}
    type: {{ cluster_type }}

    {% set tls_checked = False %}
    {% for host in cluster.hosts %}
      {% set port = host.port|string %}
      {% if not tls_checked and '443' in port %}
        {% set tls_checked = True %}
    tls_context:
      common_tls_context:
        tls_params:
          cipher_suites:
            # Default ciphers
            # --- We removed a few duplicates and bleeding edge ciphers
            - ECDHE-RSA-AES128-SHA
            - AES128-GCM-SHA256
            - ECDHE-RSA-AES256-GCM-SHA384
            - ECDHE-RSA-AES256-SHA
            - AES256-GCM-SHA384
            # Cloudfront ORIGIN RSA ciphers
            - ECDHE-RSA-AES128-SHA256
            - ECDHE-RSA-AES256-SHA384
            - AES256-SHA
            - AES128-SHA
            - DES-CBC3-SHA
            # Cloudfront ORIGIN ECDSA ciphers
            - ECDHE-ECDSA-AES256-GCM-SHA384
            - ECDHE-ECDSA-AES256-SHA384
            - ECDHE-ECDSA-AES256-SHA
            - ECDHE-ECDSA-AES128-GCM-SHA256
            - ECDHE-ECDSA-AES128-SHA256
            - ECDHE-ECDSA-AES128-SHA
            # Very new ciphers
            - ECDHE-ECDSA-CHACHA20-POLY1305
            - ECDHE-RSA-CHACHA20-POLY1305
      allow_renegotiation: no
      sni: {{ host.address }}
      {% endif %}
    {% endfor %}
{% endfor %}
{% endfor %}
