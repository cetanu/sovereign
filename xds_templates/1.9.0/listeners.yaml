version_info: '{{ version|default(0) }}'
resources:
  # ELB Healthcheck
  - '@type': type.googleapis.com/envoy.api.v2.Listener
    name: elb_healthcheck_listener
    address:
      socket_address:
        address: 0.0.0.0
        port_value: 8080
        protocol: TCP
    filter_chains:
      - filters:
        - name: envoy.http_connection_manager
          config:
            stat_prefix: elb_healthcheck
            codec_type: AUTO
            route_config: {}
            access_log:
              - name: envoy.file_access_log
                config:
                  path: /dev/null
            http_filters:
              - name: envoy.health_check
                config:
                  pass_through_mode: no
                  headers:
                    - name: user-agent
                      regex_match: '.*?[Hh]ealth.*?[Cc]heck.*?'
  # Redirect HTTP -> HTTPS
  - '@type': type.googleapis.com/envoy.api.v2.Listener
    name: redirect_to_https
    address:
      socket_address:
        address: 0.0.0.0
        port_value: 80
        protocol: TCP
    filter_chains:
      - filters:
        - name: envoy.http_connection_manager
          config:
            stat_prefix: ssl_redirect
            codec_type: AUTO
            access_log:
              - name: envoy.file_access_log
                config:
                  path: /dev/null
            http_filters:
              - name: envoy.router
                config: {}
            route_config:
              name: redirect_to_https
              virtual_hosts:
              - name: backend
                domains:
                - "*"
                routes:
                - match: { prefix: "/" }
                  redirect: { https_redirect: true }
  # HTTPS Listener
  - '@type': type.googleapis.com/envoy.api.v2.Listener
    name: global_edge_listener
    per_connection_buffer_limit_bytes: 16777216
    tcp_fast_open_queue_length: 0
    address:
      socket_address:
        address: 0.0.0.0
        port_value: 443
        protocol: TCP
    listener_filters:
      - name: envoy.listener.tls_inspector
        config: {}
    filter_chains:
    {% for certificate in certificates %}
      - filters:
        - name: envoy.http_connection_manager
          config:
            stat_prefix: backends
            codec_type: AUTO
            idle_timeout: 300s
            server_name: globaledge-envoy
            use_remote_address: yes
            access_log:
              - name: envoy.file_access_log
                config:
                  path: /var/log/envoy/access.log
                  json_format:
                    unixtime: "%START_TIME(%s.%9f)%"
                    time: "%START_TIME(%Y-%m-%dT%H:%M:%S.%9f%z)%"
                    total_duration: "%DURATION%"
                    response_ttfb: "%RESPONSE_DURATION%"
                    response_duration: "%RESPONSE_TX_DURATION%"
                    site: "%REQ(HOST?:AUTHORITY)%"
                    sni: "%REQUESTED_SERVER_NAME%"
                    uri: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH):256%"
                    src_ip: "%DOWNSTREAM_REMOTE_ADDRESS%"
                    dest_ip: "%UPSTREAM_HOST%"
                    status: "%RESPONSE_CODE%"
                    cluster: "%UPSTREAM_CLUSTER%"
                    http_method: "%REQ(:METHOD)%"
                    http_protocol: "%PROTOCOL%"
                    http_user_agent: "%REQ(USER-AGENT)%"
                    request_id: "%REQ(X-REQUEST-ID)%"
                    bytes_out: "%BYTES_SENT%"
                    bytes_in: "%BYTES_RECEIVED%"
                    flags: "%RESPONSE_FLAGS%"
            http_filters:
              - name: envoy.health_check
                config:
                  pass_through_mode: no
                  headers:
                    - name: x-envoy-provide-health
                      present_match: yes
              - name: envoy.gzip
              - name: envoy.router
            rds:
              route_config_name: service_instances_rds
              config_source:
                api_config_source:
                  api_type: REST
                  cluster_names: [controlplane]
                  refresh_delay: 5s
        filter_chain_match:
          server_names:
            {% for server_name in certificate['server_names'] %}
            - {{ server_name|tojson }}
            {% endfor %}
        tls_context:
          common_tls_context:
            tls_certificates:
              - certificate_chain:
                  inline_string: {{ certificate['public_key']|tojson }}
                private_key:
                  inline_string: {{ crypto.decrypt(certificate['private_key'])|tojson }}
            tls_params:
              tls_minimum_protocol_version: TLSv1_2
            alpn_protocols: h2,http/1.1
  {% endfor %}
