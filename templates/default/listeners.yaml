resources:
  # Redirect HTTP -> HTTPS
  - name: port80
    address:
      socket_address:
        address: 0.0.0.0
        port_value: 80
        protocol: TCP
    filter_chains:
      - filters:
        - name: envoy.http_connection_manager
          typed_config:
            '@type': &hcm type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
            stat_prefix: port80
            codec_type: AUTO
            access_log:
              - name: envoy.file_access_log
                typed_config:
                  "@type": "type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog"
                  log_format:
                    json_format:
                      attempt_count: "%UPSTREAM_REQUEST_ATTEMPT_COUNT%"
                      bytes_in: "%BYTES_RECEIVED%"
                      bytes_out: "%BYTES_SENT%"
                      cluster: "%UPSTREAM_CLUSTER%"
                      dest_ip: "%UPSTREAM_HOST%"
                      flags: "%RESPONSE_FLAGS%"
                      http_method: "%REQ(:METHOD)%"
                      http_protocol: "%PROTOCOL%"
                      http_user_agent: "%REQ(USER-AGENT)%"
                      request_id: "%REQ(X-REQUEST-ID)%"
                      route: "%ROUTE_NAME%"
                      sni: "%REQUESTED_SERVER_NAME%"
                      src_ip: "%DOWNSTREAM_REMOTE_ADDRESS%"
                      status: "%RESPONSE_CODE%"
                      time: "%START_TIME(%Y-%m-%dT%H:%M:%S.%9f%z)%"
                      tls_cipher: "%DOWNSTREAM_TLS_CIPHER%"
                      duration: "%DURATION%"
                      uri: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH):2048%"
            http_filters:
              - name: envoy.filters.http.router
                typed_config:
                  '@type': type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
            route_config:
              name: port80routes
              virtual_hosts:
              - name: backend
                domains:
                - "*"
                routes:
                - name: tracing
                  match: { prefix: "/v2/api/spans" }
                  direct_response:
                    status: 202
                - name: ssl_redir
                  match: { prefix: "/" }
                  redirect: { https_redirect: true }
  # HTTPS Listener
  - name: https_listener
    address:
      socket_address:
        address: 0.0.0.0
        port_value: 443
        protocol: TCP
    listener_filters:
      - name: envoy.filters.listener.tls_inspector
        typed_config:
          '@type': type.googleapis.com/envoy.extensions.filters.listener.tls_inspector.v3.TlsInspector
    filter_chains:
    {% for certificate in certificates %}
      - filters:
        - name: envoy.http_connection_manager
          typed_config:
            '@type': *hcm
            stat_prefix: backends
            codec_type: AUTO
            http_filters:
              - name: envoy.filters.http.router
                typed_config:
                  '@type': type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
            rds:
              route_config_name: rds
              config_source:
                api_config_source:
                  api_type: REST
                  transport_api_version: V3
                  cluster_names: [{{ host_header }}]
                  refresh_delay: 5s
        filter_chain_match:
          server_names: {{ certificate['server_names']|tojson }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            '@type': type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
            common_tls_context:
              tls_certificate_sds_secret_configs:
                - name: certificates_{{ loop.index }}
                  sds_config:
                    api_config_source:
                      api_type: REST
                      transport_api_version: V3
                      cluster_names: [{{ host_header }}]
                      refresh_delay: 5s
    {% endfor %}
